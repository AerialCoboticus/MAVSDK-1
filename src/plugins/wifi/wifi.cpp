// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/wifi/wifi.proto)

#include <iomanip>

#include "wifi_impl.h"
#include "plugins/wifi/wifi.h"

namespace mavsdk {

using AccessPointConfiguration = Wifi::AccessPointConfiguration;

Wifi::Wifi(System& system) : PluginBase(), _impl{new WifiImpl(system)} {}

Wifi::~Wifi() {}

void Wifi::get_access_point_configuration_async(const GetAccessPointConfigurationCallback callback)
{
    _impl->get_access_point_configuration_async(callback);
}

std::pair<Wifi::Result, Wifi::AccessPointConfiguration> Wifi::get_access_point_configuration() const
{
    return _impl->get_access_point_configuration();
}

void Wifi::set_access_point_configuration_async(
    AccessPointConfiguration configuration, const ResultCallback callback)
{
    _impl->set_access_point_configuration_async(configuration, callback);
}

Wifi::Result Wifi::set_access_point_configuration(AccessPointConfiguration configuration) const
{
    return _impl->set_access_point_configuration(configuration);
}

bool operator==(
    const Wifi::AccessPointConfiguration& lhs, const Wifi::AccessPointConfiguration& rhs)
{
    return (rhs.ssid == lhs.ssid) && (rhs.password == lhs.password) && (rhs.mode == lhs.mode);
}

std::ostream&
operator<<(std::ostream& str, Wifi::AccessPointConfiguration const& access_point_configuration)
{
    str << std::setprecision(15);
    str << "access_point_configuration:" << '\n' << "{\n";
    str << "    ssid: " << access_point_configuration.ssid << '\n';
    str << "    password: " << access_point_configuration.password << '\n';
    str << "    mode: " << access_point_configuration.mode << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, Wifi::Result const& result)
{
    switch (result) {
        case Wifi::Result::Unknown:
            return str << "Unknown";
        case Wifi::Result::Success:
            return str << "Success";
        case Wifi::Result::Rejected:
            return str << "Rejected";
        case Wifi::Result::ModeError:
            return str << "Mode Error";
        case Wifi::Result::SsidError:
            return str << "Ssid Error";
        case Wifi::Result::PasswordError:
            return str << "Password Error";
        case Wifi::Result::Timeout:
            return str << "Timeout";
        default:
            return str << "Unknown";
    }
}

std::ostream& operator<<(std::ostream& str, Wifi::Mode const& mode)
{
    switch (mode) {
        case Wifi::Mode::Undefined:
            return str << "Undefined";
        case Wifi::Mode::AccessPoint:
            return str << "Access Point";
        case Wifi::Mode::Station:
            return str << "Station";
        default:
            return str << "Unknown";
    }
}

} // namespace mavsdk