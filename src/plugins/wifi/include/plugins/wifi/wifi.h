// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/wifi/wifi.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

namespace mavsdk {

class System;
class WifiImpl;

/**
 * @brief Gives access to the onboard wifi configuration
 */
class Wifi : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto wifi = std::make_shared<Wifi>(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Wifi(System& system);

    /**
     * @brief Destructor (internal use only).
     */
    ~Wifi();

    /**
     * @brief Mode type.
     */
    enum class Mode {
        Undefined, /**< @brief. */
        AccessPoint, /**< @brief. */
        Station, /**< @brief. */
    };

    /**
     * @brief Stream operator to print information about a `Wifi::Mode`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Wifi::Mode const& mode);

    /**
     * @brief Access point configuration type.
     */
    struct AccessPointConfiguration {
        std::string ssid{}; /**< @brief Name of wifi network (SSID). Blank to leave it unchanged
                               when setting. */
        std::string password{}; /**< @brief Password of wifi network. Blank for open AP. MD5 hash
                                   when getting. */
        Mode mode{}; /**< @brief Wifi mode. */
    };

    /**
     * @brief Equal operator to compare two `Wifi::AccessPointConfiguration` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(
        const Wifi::AccessPointConfiguration& lhs, const Wifi::AccessPointConfiguration& rhs);

    /**
     * @brief Stream operator to print information about a `Wifi::AccessPointConfiguration`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, Wifi::AccessPointConfiguration const& access_point_configuration);

    /**
     * @brief Possible results returned for wifi requests.
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Request was successful. */
        Rejected, /**< @brief Changes rejected. */
        ModeError, /**< @brief Invalid mode. */
        SsidError, /**< @brief Invalid SSID. */
        PasswordError, /**< @brief Invalid password. */
        Timeout, /**< @brief Request timed out. */
    };

    /**
     * @brief Stream operator to print information about a `Wifi::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Wifi::Result const& result);

    /**
     * @brief Callback type for asynchronous Wifi calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Callback type for get_access_point_configuration_async.
     */
    using GetAccessPointConfigurationCallback =
        std::function<void(Result, AccessPointConfiguration)>;

    /**
     * @brief Get access point configuration
     *
     * This function is non-blocking. See 'get_access_point_configuration' for the blocking
     * counterpart.
     */
    void get_access_point_configuration_async(const GetAccessPointConfigurationCallback callback);

    /**
     * @brief Get access point configuration
     *
     * This function is blocking. See 'get_access_point_configuration_async' for the non-blocking
     * counterpart.
     *
     * @return Result of request.
     */
    std::pair<Result, Wifi::AccessPointConfiguration> get_access_point_configuration() const;

    /**
     * @brief Set access point configuration
     *
     * This function is non-blocking. See 'set_access_point_configuration' for the blocking
     * counterpart.
     */
    void set_access_point_configuration_async(
        AccessPointConfiguration configuration, const ResultCallback callback);

    /**
     * @brief Set access point configuration
     *
     * This function is blocking. See 'set_access_point_configuration_async' for the non-blocking
     * counterpart.
     *
     * @return Result of request.
     */
    Result set_access_point_configuration(AccessPointConfiguration configuration) const;

    /**
     * @brief Copy constructor (object is not copyable).
     */
    Wifi(const Wifi&) = delete;

    /**
     * @brief Equality operator (object is not copyable).
     */
    const Wifi& operator=(const Wifi&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<WifiImpl> _impl;
};

} // namespace mavsdk