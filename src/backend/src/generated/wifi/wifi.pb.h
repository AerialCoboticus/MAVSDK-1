// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wifi/wifi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wifi_2fwifi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wifi_2fwifi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wifi_2fwifi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wifi_2fwifi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wifi_2fwifi_2eproto;
namespace mavsdk {
namespace rpc {
namespace wifi {
class AccessPointConfiguration;
class AccessPointConfigurationDefaultTypeInternal;
extern AccessPointConfigurationDefaultTypeInternal _AccessPointConfiguration_default_instance_;
class GetAccessPointConfigurationRequest;
class GetAccessPointConfigurationRequestDefaultTypeInternal;
extern GetAccessPointConfigurationRequestDefaultTypeInternal _GetAccessPointConfigurationRequest_default_instance_;
class GetAccessPointConfigurationResponse;
class GetAccessPointConfigurationResponseDefaultTypeInternal;
extern GetAccessPointConfigurationResponseDefaultTypeInternal _GetAccessPointConfigurationResponse_default_instance_;
class SetAccessPointConfigurationRequest;
class SetAccessPointConfigurationRequestDefaultTypeInternal;
extern SetAccessPointConfigurationRequestDefaultTypeInternal _SetAccessPointConfigurationRequest_default_instance_;
class SetAccessPointConfigurationResponse;
class SetAccessPointConfigurationResponseDefaultTypeInternal;
extern SetAccessPointConfigurationResponseDefaultTypeInternal _SetAccessPointConfigurationResponse_default_instance_;
class WifiResult;
class WifiResultDefaultTypeInternal;
extern WifiResultDefaultTypeInternal _WifiResult_default_instance_;
}  // namespace wifi
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::wifi::AccessPointConfiguration* Arena::CreateMaybeMessage<::mavsdk::rpc::wifi::AccessPointConfiguration>(Arena*);
template<> ::mavsdk::rpc::wifi::GetAccessPointConfigurationRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::wifi::GetAccessPointConfigurationRequest>(Arena*);
template<> ::mavsdk::rpc::wifi::GetAccessPointConfigurationResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::wifi::GetAccessPointConfigurationResponse>(Arena*);
template<> ::mavsdk::rpc::wifi::SetAccessPointConfigurationRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::wifi::SetAccessPointConfigurationRequest>(Arena*);
template<> ::mavsdk::rpc::wifi::SetAccessPointConfigurationResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::wifi::SetAccessPointConfigurationResponse>(Arena*);
template<> ::mavsdk::rpc::wifi::WifiResult* Arena::CreateMaybeMessage<::mavsdk::rpc::wifi::WifiResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace wifi {

enum WifiResult_Result : int {
  WifiResult_Result_RESULT_UNKNOWN = 0,
  WifiResult_Result_RESULT_SUCCESS = 1,
  WifiResult_Result_RESULT_REJECTED = 2,
  WifiResult_Result_RESULT_MODE_ERROR = 3,
  WifiResult_Result_RESULT_SSID_ERROR = 4,
  WifiResult_Result_RESULT_PASSWORD_ERROR = 5,
  WifiResult_Result_RESULT_TIMEOUT = 6,
  WifiResult_Result_WifiResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WifiResult_Result_WifiResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WifiResult_Result_IsValid(int value);
constexpr WifiResult_Result WifiResult_Result_Result_MIN = WifiResult_Result_RESULT_UNKNOWN;
constexpr WifiResult_Result WifiResult_Result_Result_MAX = WifiResult_Result_RESULT_TIMEOUT;
constexpr int WifiResult_Result_Result_ARRAYSIZE = WifiResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WifiResult_Result_descriptor();
template<typename T>
inline const std::string& WifiResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WifiResult_Result_descriptor(), enum_t_value);
}
inline bool WifiResult_Result_Parse(
    const std::string& name, WifiResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WifiResult_Result>(
    WifiResult_Result_descriptor(), name, value);
}
enum Mode : int {
  MODE_UNDEFINED = 0,
  MODE_ACCESS_POINT = 1,
  MODE_STATION = 2,
  Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Mode_IsValid(int value);
constexpr Mode Mode_MIN = MODE_UNDEFINED;
constexpr Mode Mode_MAX = MODE_STATION;
constexpr int Mode_ARRAYSIZE = Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor();
template<typename T>
inline const std::string& Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Mode_descriptor(), enum_t_value);
}
inline bool Mode_Parse(
    const std::string& name, Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Mode>(
    Mode_descriptor(), name, value);
}
// ===================================================================

class GetAccessPointConfigurationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest) */ {
 public:
  GetAccessPointConfigurationRequest();
  virtual ~GetAccessPointConfigurationRequest();

  GetAccessPointConfigurationRequest(const GetAccessPointConfigurationRequest& from);
  GetAccessPointConfigurationRequest(GetAccessPointConfigurationRequest&& from) noexcept
    : GetAccessPointConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetAccessPointConfigurationRequest& operator=(const GetAccessPointConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccessPointConfigurationRequest& operator=(GetAccessPointConfigurationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccessPointConfigurationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccessPointConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetAccessPointConfigurationRequest*>(
               &_GetAccessPointConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetAccessPointConfigurationRequest& a, GetAccessPointConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccessPointConfigurationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccessPointConfigurationRequest* New() const final {
    return CreateMaybeMessage<GetAccessPointConfigurationRequest>(nullptr);
  }

  GetAccessPointConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccessPointConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccessPointConfigurationRequest& from);
  void MergeFrom(const GetAccessPointConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccessPointConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.wifi.GetAccessPointConfigurationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wifi_2fwifi_2eproto);
    return ::descriptor_table_wifi_2fwifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifi_2fwifi_2eproto;
};
// -------------------------------------------------------------------

class GetAccessPointConfigurationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse) */ {
 public:
  GetAccessPointConfigurationResponse();
  virtual ~GetAccessPointConfigurationResponse();

  GetAccessPointConfigurationResponse(const GetAccessPointConfigurationResponse& from);
  GetAccessPointConfigurationResponse(GetAccessPointConfigurationResponse&& from) noexcept
    : GetAccessPointConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetAccessPointConfigurationResponse& operator=(const GetAccessPointConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccessPointConfigurationResponse& operator=(GetAccessPointConfigurationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccessPointConfigurationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccessPointConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccessPointConfigurationResponse*>(
               &_GetAccessPointConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAccessPointConfigurationResponse& a, GetAccessPointConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccessPointConfigurationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccessPointConfigurationResponse* New() const final {
    return CreateMaybeMessage<GetAccessPointConfigurationResponse>(nullptr);
  }

  GetAccessPointConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccessPointConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccessPointConfigurationResponse& from);
  void MergeFrom(const GetAccessPointConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccessPointConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.wifi.GetAccessPointConfigurationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wifi_2fwifi_2eproto);
    return ::descriptor_table_wifi_2fwifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWifiResultFieldNumber = 1,
    kConfigurationFieldNumber = 2,
  };
  // .mavsdk.rpc.wifi.WifiResult wifi_result = 1;
  bool has_wifi_result() const;
  private:
  bool _internal_has_wifi_result() const;
  public:
  void clear_wifi_result();
  const ::mavsdk::rpc::wifi::WifiResult& wifi_result() const;
  ::mavsdk::rpc::wifi::WifiResult* release_wifi_result();
  ::mavsdk::rpc::wifi::WifiResult* mutable_wifi_result();
  void set_allocated_wifi_result(::mavsdk::rpc::wifi::WifiResult* wifi_result);
  private:
  const ::mavsdk::rpc::wifi::WifiResult& _internal_wifi_result() const;
  ::mavsdk::rpc::wifi::WifiResult* _internal_mutable_wifi_result();
  public:

  // .mavsdk.rpc.wifi.AccessPointConfiguration configuration = 2;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::mavsdk::rpc::wifi::AccessPointConfiguration& configuration() const;
  ::mavsdk::rpc::wifi::AccessPointConfiguration* release_configuration();
  ::mavsdk::rpc::wifi::AccessPointConfiguration* mutable_configuration();
  void set_allocated_configuration(::mavsdk::rpc::wifi::AccessPointConfiguration* configuration);
  private:
  const ::mavsdk::rpc::wifi::AccessPointConfiguration& _internal_configuration() const;
  ::mavsdk::rpc::wifi::AccessPointConfiguration* _internal_mutable_configuration();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::wifi::WifiResult* wifi_result_;
  ::mavsdk::rpc::wifi::AccessPointConfiguration* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifi_2fwifi_2eproto;
};
// -------------------------------------------------------------------

class SetAccessPointConfigurationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest) */ {
 public:
  SetAccessPointConfigurationRequest();
  virtual ~SetAccessPointConfigurationRequest();

  SetAccessPointConfigurationRequest(const SetAccessPointConfigurationRequest& from);
  SetAccessPointConfigurationRequest(SetAccessPointConfigurationRequest&& from) noexcept
    : SetAccessPointConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline SetAccessPointConfigurationRequest& operator=(const SetAccessPointConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAccessPointConfigurationRequest& operator=(SetAccessPointConfigurationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAccessPointConfigurationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAccessPointConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const SetAccessPointConfigurationRequest*>(
               &_SetAccessPointConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetAccessPointConfigurationRequest& a, SetAccessPointConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAccessPointConfigurationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAccessPointConfigurationRequest* New() const final {
    return CreateMaybeMessage<SetAccessPointConfigurationRequest>(nullptr);
  }

  SetAccessPointConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAccessPointConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAccessPointConfigurationRequest& from);
  void MergeFrom(const SetAccessPointConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAccessPointConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.wifi.SetAccessPointConfigurationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wifi_2fwifi_2eproto);
    return ::descriptor_table_wifi_2fwifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationFieldNumber = 1,
  };
  // .mavsdk.rpc.wifi.AccessPointConfiguration configuration = 1;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::mavsdk::rpc::wifi::AccessPointConfiguration& configuration() const;
  ::mavsdk::rpc::wifi::AccessPointConfiguration* release_configuration();
  ::mavsdk::rpc::wifi::AccessPointConfiguration* mutable_configuration();
  void set_allocated_configuration(::mavsdk::rpc::wifi::AccessPointConfiguration* configuration);
  private:
  const ::mavsdk::rpc::wifi::AccessPointConfiguration& _internal_configuration() const;
  ::mavsdk::rpc::wifi::AccessPointConfiguration* _internal_mutable_configuration();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::wifi::AccessPointConfiguration* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifi_2fwifi_2eproto;
};
// -------------------------------------------------------------------

class SetAccessPointConfigurationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse) */ {
 public:
  SetAccessPointConfigurationResponse();
  virtual ~SetAccessPointConfigurationResponse();

  SetAccessPointConfigurationResponse(const SetAccessPointConfigurationResponse& from);
  SetAccessPointConfigurationResponse(SetAccessPointConfigurationResponse&& from) noexcept
    : SetAccessPointConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline SetAccessPointConfigurationResponse& operator=(const SetAccessPointConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAccessPointConfigurationResponse& operator=(SetAccessPointConfigurationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAccessPointConfigurationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAccessPointConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const SetAccessPointConfigurationResponse*>(
               &_SetAccessPointConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetAccessPointConfigurationResponse& a, SetAccessPointConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAccessPointConfigurationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAccessPointConfigurationResponse* New() const final {
    return CreateMaybeMessage<SetAccessPointConfigurationResponse>(nullptr);
  }

  SetAccessPointConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAccessPointConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAccessPointConfigurationResponse& from);
  void MergeFrom(const SetAccessPointConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAccessPointConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.wifi.SetAccessPointConfigurationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wifi_2fwifi_2eproto);
    return ::descriptor_table_wifi_2fwifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWifiResultFieldNumber = 1,
  };
  // .mavsdk.rpc.wifi.WifiResult wifi_result = 1;
  bool has_wifi_result() const;
  private:
  bool _internal_has_wifi_result() const;
  public:
  void clear_wifi_result();
  const ::mavsdk::rpc::wifi::WifiResult& wifi_result() const;
  ::mavsdk::rpc::wifi::WifiResult* release_wifi_result();
  ::mavsdk::rpc::wifi::WifiResult* mutable_wifi_result();
  void set_allocated_wifi_result(::mavsdk::rpc::wifi::WifiResult* wifi_result);
  private:
  const ::mavsdk::rpc::wifi::WifiResult& _internal_wifi_result() const;
  ::mavsdk::rpc::wifi::WifiResult* _internal_mutable_wifi_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::wifi::WifiResult* wifi_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifi_2fwifi_2eproto;
};
// -------------------------------------------------------------------

class AccessPointConfiguration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.wifi.AccessPointConfiguration) */ {
 public:
  AccessPointConfiguration();
  virtual ~AccessPointConfiguration();

  AccessPointConfiguration(const AccessPointConfiguration& from);
  AccessPointConfiguration(AccessPointConfiguration&& from) noexcept
    : AccessPointConfiguration() {
    *this = ::std::move(from);
  }

  inline AccessPointConfiguration& operator=(const AccessPointConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessPointConfiguration& operator=(AccessPointConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccessPointConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessPointConfiguration* internal_default_instance() {
    return reinterpret_cast<const AccessPointConfiguration*>(
               &_AccessPointConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AccessPointConfiguration& a, AccessPointConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessPointConfiguration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccessPointConfiguration* New() const final {
    return CreateMaybeMessage<AccessPointConfiguration>(nullptr);
  }

  AccessPointConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccessPointConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccessPointConfiguration& from);
  void MergeFrom(const AccessPointConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessPointConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.wifi.AccessPointConfiguration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wifi_2fwifi_2eproto);
    return ::descriptor_table_wifi_2fwifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .mavsdk.rpc.wifi.Mode mode = 3;
  void clear_mode();
  ::mavsdk::rpc::wifi::Mode mode() const;
  void set_mode(::mavsdk::rpc::wifi::Mode value);
  private:
  ::mavsdk::rpc::wifi::Mode _internal_mode() const;
  void _internal_set_mode(::mavsdk::rpc::wifi::Mode value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.wifi.AccessPointConfiguration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifi_2fwifi_2eproto;
};
// -------------------------------------------------------------------

class WifiResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.wifi.WifiResult) */ {
 public:
  WifiResult();
  virtual ~WifiResult();

  WifiResult(const WifiResult& from);
  WifiResult(WifiResult&& from) noexcept
    : WifiResult() {
    *this = ::std::move(from);
  }

  inline WifiResult& operator=(const WifiResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiResult& operator=(WifiResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WifiResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WifiResult* internal_default_instance() {
    return reinterpret_cast<const WifiResult*>(
               &_WifiResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WifiResult& a, WifiResult& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WifiResult* New() const final {
    return CreateMaybeMessage<WifiResult>(nullptr);
  }

  WifiResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WifiResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WifiResult& from);
  void MergeFrom(const WifiResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WifiResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.wifi.WifiResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wifi_2fwifi_2eproto);
    return ::descriptor_table_wifi_2fwifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WifiResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    WifiResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    WifiResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_REJECTED =
    WifiResult_Result_RESULT_REJECTED;
  static constexpr Result RESULT_MODE_ERROR =
    WifiResult_Result_RESULT_MODE_ERROR;
  static constexpr Result RESULT_SSID_ERROR =
    WifiResult_Result_RESULT_SSID_ERROR;
  static constexpr Result RESULT_PASSWORD_ERROR =
    WifiResult_Result_RESULT_PASSWORD_ERROR;
  static constexpr Result RESULT_TIMEOUT =
    WifiResult_Result_RESULT_TIMEOUT;
  static inline bool Result_IsValid(int value) {
    return WifiResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    WifiResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    WifiResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    WifiResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return WifiResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return WifiResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return WifiResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const char* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.wifi.WifiResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::wifi::WifiResult_Result result() const;
  void set_result(::mavsdk::rpc::wifi::WifiResult_Result value);
  private:
  ::mavsdk::rpc::wifi::WifiResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::wifi::WifiResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.wifi.WifiResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wifi_2fwifi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetAccessPointConfigurationRequest

// -------------------------------------------------------------------

// GetAccessPointConfigurationResponse

// .mavsdk.rpc.wifi.WifiResult wifi_result = 1;
inline bool GetAccessPointConfigurationResponse::_internal_has_wifi_result() const {
  return this != internal_default_instance() && wifi_result_ != nullptr;
}
inline bool GetAccessPointConfigurationResponse::has_wifi_result() const {
  return _internal_has_wifi_result();
}
inline void GetAccessPointConfigurationResponse::clear_wifi_result() {
  if (GetArenaNoVirtual() == nullptr && wifi_result_ != nullptr) {
    delete wifi_result_;
  }
  wifi_result_ = nullptr;
}
inline const ::mavsdk::rpc::wifi::WifiResult& GetAccessPointConfigurationResponse::_internal_wifi_result() const {
  const ::mavsdk::rpc::wifi::WifiResult* p = wifi_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::wifi::WifiResult*>(
      &::mavsdk::rpc::wifi::_WifiResult_default_instance_);
}
inline const ::mavsdk::rpc::wifi::WifiResult& GetAccessPointConfigurationResponse::wifi_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse.wifi_result)
  return _internal_wifi_result();
}
inline ::mavsdk::rpc::wifi::WifiResult* GetAccessPointConfigurationResponse::release_wifi_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse.wifi_result)
  
  ::mavsdk::rpc::wifi::WifiResult* temp = wifi_result_;
  wifi_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::wifi::WifiResult* GetAccessPointConfigurationResponse::_internal_mutable_wifi_result() {
  
  if (wifi_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::wifi::WifiResult>(GetArenaNoVirtual());
    wifi_result_ = p;
  }
  return wifi_result_;
}
inline ::mavsdk::rpc::wifi::WifiResult* GetAccessPointConfigurationResponse::mutable_wifi_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse.wifi_result)
  return _internal_mutable_wifi_result();
}
inline void GetAccessPointConfigurationResponse::set_allocated_wifi_result(::mavsdk::rpc::wifi::WifiResult* wifi_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wifi_result_;
  }
  if (wifi_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wifi_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi_result, submessage_arena);
    }
    
  } else {
    
  }
  wifi_result_ = wifi_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse.wifi_result)
}

// .mavsdk.rpc.wifi.AccessPointConfiguration configuration = 2;
inline bool GetAccessPointConfigurationResponse::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool GetAccessPointConfigurationResponse::has_configuration() const {
  return _internal_has_configuration();
}
inline void GetAccessPointConfigurationResponse::clear_configuration() {
  if (GetArenaNoVirtual() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
}
inline const ::mavsdk::rpc::wifi::AccessPointConfiguration& GetAccessPointConfigurationResponse::_internal_configuration() const {
  const ::mavsdk::rpc::wifi::AccessPointConfiguration* p = configuration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::wifi::AccessPointConfiguration*>(
      &::mavsdk::rpc::wifi::_AccessPointConfiguration_default_instance_);
}
inline const ::mavsdk::rpc::wifi::AccessPointConfiguration& GetAccessPointConfigurationResponse::configuration() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse.configuration)
  return _internal_configuration();
}
inline ::mavsdk::rpc::wifi::AccessPointConfiguration* GetAccessPointConfigurationResponse::release_configuration() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse.configuration)
  
  ::mavsdk::rpc::wifi::AccessPointConfiguration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::wifi::AccessPointConfiguration* GetAccessPointConfigurationResponse::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::wifi::AccessPointConfiguration>(GetArenaNoVirtual());
    configuration_ = p;
  }
  return configuration_;
}
inline ::mavsdk::rpc::wifi::AccessPointConfiguration* GetAccessPointConfigurationResponse::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse.configuration)
  return _internal_mutable_configuration();
}
inline void GetAccessPointConfigurationResponse::set_allocated_configuration(::mavsdk::rpc::wifi::AccessPointConfiguration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete configuration_;
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse.configuration)
}

// -------------------------------------------------------------------

// SetAccessPointConfigurationRequest

// .mavsdk.rpc.wifi.AccessPointConfiguration configuration = 1;
inline bool SetAccessPointConfigurationRequest::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool SetAccessPointConfigurationRequest::has_configuration() const {
  return _internal_has_configuration();
}
inline void SetAccessPointConfigurationRequest::clear_configuration() {
  if (GetArenaNoVirtual() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
}
inline const ::mavsdk::rpc::wifi::AccessPointConfiguration& SetAccessPointConfigurationRequest::_internal_configuration() const {
  const ::mavsdk::rpc::wifi::AccessPointConfiguration* p = configuration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::wifi::AccessPointConfiguration*>(
      &::mavsdk::rpc::wifi::_AccessPointConfiguration_default_instance_);
}
inline const ::mavsdk::rpc::wifi::AccessPointConfiguration& SetAccessPointConfigurationRequest::configuration() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest.configuration)
  return _internal_configuration();
}
inline ::mavsdk::rpc::wifi::AccessPointConfiguration* SetAccessPointConfigurationRequest::release_configuration() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest.configuration)
  
  ::mavsdk::rpc::wifi::AccessPointConfiguration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::wifi::AccessPointConfiguration* SetAccessPointConfigurationRequest::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::wifi::AccessPointConfiguration>(GetArenaNoVirtual());
    configuration_ = p;
  }
  return configuration_;
}
inline ::mavsdk::rpc::wifi::AccessPointConfiguration* SetAccessPointConfigurationRequest::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest.configuration)
  return _internal_mutable_configuration();
}
inline void SetAccessPointConfigurationRequest::set_allocated_configuration(::mavsdk::rpc::wifi::AccessPointConfiguration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete configuration_;
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest.configuration)
}

// -------------------------------------------------------------------

// SetAccessPointConfigurationResponse

// .mavsdk.rpc.wifi.WifiResult wifi_result = 1;
inline bool SetAccessPointConfigurationResponse::_internal_has_wifi_result() const {
  return this != internal_default_instance() && wifi_result_ != nullptr;
}
inline bool SetAccessPointConfigurationResponse::has_wifi_result() const {
  return _internal_has_wifi_result();
}
inline void SetAccessPointConfigurationResponse::clear_wifi_result() {
  if (GetArenaNoVirtual() == nullptr && wifi_result_ != nullptr) {
    delete wifi_result_;
  }
  wifi_result_ = nullptr;
}
inline const ::mavsdk::rpc::wifi::WifiResult& SetAccessPointConfigurationResponse::_internal_wifi_result() const {
  const ::mavsdk::rpc::wifi::WifiResult* p = wifi_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::wifi::WifiResult*>(
      &::mavsdk::rpc::wifi::_WifiResult_default_instance_);
}
inline const ::mavsdk::rpc::wifi::WifiResult& SetAccessPointConfigurationResponse::wifi_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse.wifi_result)
  return _internal_wifi_result();
}
inline ::mavsdk::rpc::wifi::WifiResult* SetAccessPointConfigurationResponse::release_wifi_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse.wifi_result)
  
  ::mavsdk::rpc::wifi::WifiResult* temp = wifi_result_;
  wifi_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::wifi::WifiResult* SetAccessPointConfigurationResponse::_internal_mutable_wifi_result() {
  
  if (wifi_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::wifi::WifiResult>(GetArenaNoVirtual());
    wifi_result_ = p;
  }
  return wifi_result_;
}
inline ::mavsdk::rpc::wifi::WifiResult* SetAccessPointConfigurationResponse::mutable_wifi_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse.wifi_result)
  return _internal_mutable_wifi_result();
}
inline void SetAccessPointConfigurationResponse::set_allocated_wifi_result(::mavsdk::rpc::wifi::WifiResult* wifi_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wifi_result_;
  }
  if (wifi_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wifi_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi_result, submessage_arena);
    }
    
  } else {
    
  }
  wifi_result_ = wifi_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse.wifi_result)
}

// -------------------------------------------------------------------

// AccessPointConfiguration

// string ssid = 1;
inline void AccessPointConfiguration::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccessPointConfiguration::ssid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.wifi.AccessPointConfiguration.ssid)
  return _internal_ssid();
}
inline void AccessPointConfiguration::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.wifi.AccessPointConfiguration.ssid)
}
inline std::string* AccessPointConfiguration::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.wifi.AccessPointConfiguration.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& AccessPointConfiguration::_internal_ssid() const {
  return ssid_.GetNoArena();
}
inline void AccessPointConfiguration::_internal_set_ssid(const std::string& value) {
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccessPointConfiguration::set_ssid(std::string&& value) {
  
  ssid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.wifi.AccessPointConfiguration.ssid)
}
inline void AccessPointConfiguration::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.wifi.AccessPointConfiguration.ssid)
}
inline void AccessPointConfiguration::set_ssid(const char* value, size_t size) {
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.wifi.AccessPointConfiguration.ssid)
}
inline std::string* AccessPointConfiguration::_internal_mutable_ssid() {
  
  return ssid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccessPointConfiguration::release_ssid() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.wifi.AccessPointConfiguration.ssid)
  
  return ssid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccessPointConfiguration::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.wifi.AccessPointConfiguration.ssid)
}

// string password = 2;
inline void AccessPointConfiguration::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccessPointConfiguration::password() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.wifi.AccessPointConfiguration.password)
  return _internal_password();
}
inline void AccessPointConfiguration::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.wifi.AccessPointConfiguration.password)
}
inline std::string* AccessPointConfiguration::mutable_password() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.wifi.AccessPointConfiguration.password)
  return _internal_mutable_password();
}
inline const std::string& AccessPointConfiguration::_internal_password() const {
  return password_.GetNoArena();
}
inline void AccessPointConfiguration::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccessPointConfiguration::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.wifi.AccessPointConfiguration.password)
}
inline void AccessPointConfiguration::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.wifi.AccessPointConfiguration.password)
}
inline void AccessPointConfiguration::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.wifi.AccessPointConfiguration.password)
}
inline std::string* AccessPointConfiguration::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccessPointConfiguration::release_password() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.wifi.AccessPointConfiguration.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccessPointConfiguration::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.wifi.AccessPointConfiguration.password)
}

// .mavsdk.rpc.wifi.Mode mode = 3;
inline void AccessPointConfiguration::clear_mode() {
  mode_ = 0;
}
inline ::mavsdk::rpc::wifi::Mode AccessPointConfiguration::_internal_mode() const {
  return static_cast< ::mavsdk::rpc::wifi::Mode >(mode_);
}
inline ::mavsdk::rpc::wifi::Mode AccessPointConfiguration::mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.wifi.AccessPointConfiguration.mode)
  return _internal_mode();
}
inline void AccessPointConfiguration::_internal_set_mode(::mavsdk::rpc::wifi::Mode value) {
  
  mode_ = value;
}
inline void AccessPointConfiguration::set_mode(::mavsdk::rpc::wifi::Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.wifi.AccessPointConfiguration.mode)
}

// -------------------------------------------------------------------

// WifiResult

// .mavsdk.rpc.wifi.WifiResult.Result result = 1;
inline void WifiResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::wifi::WifiResult_Result WifiResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::wifi::WifiResult_Result >(result_);
}
inline ::mavsdk::rpc::wifi::WifiResult_Result WifiResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.wifi.WifiResult.result)
  return _internal_result();
}
inline void WifiResult::_internal_set_result(::mavsdk::rpc::wifi::WifiResult_Result value) {
  
  result_ = value;
}
inline void WifiResult::set_result(::mavsdk::rpc::wifi::WifiResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.wifi.WifiResult.result)
}

// string result_str = 2;
inline void WifiResult::clear_result_str() {
  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WifiResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.wifi.WifiResult.result_str)
  return _internal_result_str();
}
inline void WifiResult::set_result_str(const std::string& value) {
  _internal_set_result_str(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.wifi.WifiResult.result_str)
}
inline std::string* WifiResult::mutable_result_str() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.wifi.WifiResult.result_str)
  return _internal_mutable_result_str();
}
inline const std::string& WifiResult::_internal_result_str() const {
  return result_str_.GetNoArena();
}
inline void WifiResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WifiResult::set_result_str(std::string&& value) {
  
  result_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.wifi.WifiResult.result_str)
}
inline void WifiResult::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.wifi.WifiResult.result_str)
}
inline void WifiResult::set_result_str(const char* value, size_t size) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.wifi.WifiResult.result_str)
}
inline std::string* WifiResult::_internal_mutable_result_str() {
  
  return result_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WifiResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.wifi.WifiResult.result_str)
  
  return result_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WifiResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.wifi.WifiResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wifi
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::wifi::WifiResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::wifi::WifiResult_Result>() {
  return ::mavsdk::rpc::wifi::WifiResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::wifi::Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::wifi::Mode>() {
  return ::mavsdk::rpc::wifi::Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wifi_2fwifi_2eproto
