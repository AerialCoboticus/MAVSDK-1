// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wifi/wifi.proto

#include "wifi/wifi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_wifi_2fwifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccessPointConfiguration_wifi_2fwifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wifi_2fwifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WifiResult_wifi_2fwifi_2eproto;
namespace mavsdk {
namespace rpc {
namespace wifi {
class GetAccessPointConfigurationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccessPointConfigurationRequest> _instance;
} _GetAccessPointConfigurationRequest_default_instance_;
class GetAccessPointConfigurationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccessPointConfigurationResponse> _instance;
} _GetAccessPointConfigurationResponse_default_instance_;
class SetAccessPointConfigurationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAccessPointConfigurationRequest> _instance;
} _SetAccessPointConfigurationRequest_default_instance_;
class SetAccessPointConfigurationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAccessPointConfigurationResponse> _instance;
} _SetAccessPointConfigurationResponse_default_instance_;
class AccessPointConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccessPointConfiguration> _instance;
} _AccessPointConfiguration_default_instance_;
class WifiResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WifiResult> _instance;
} _WifiResult_default_instance_;
}  // namespace wifi
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_AccessPointConfiguration_wifi_2fwifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::wifi::_AccessPointConfiguration_default_instance_;
    new (ptr) ::mavsdk::rpc::wifi::AccessPointConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::wifi::AccessPointConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccessPointConfiguration_wifi_2fwifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccessPointConfiguration_wifi_2fwifi_2eproto}, {}};

static void InitDefaultsscc_info_GetAccessPointConfigurationRequest_wifi_2fwifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::wifi::_GetAccessPointConfigurationRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::wifi::GetAccessPointConfigurationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::wifi::GetAccessPointConfigurationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAccessPointConfigurationRequest_wifi_2fwifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAccessPointConfigurationRequest_wifi_2fwifi_2eproto}, {}};

static void InitDefaultsscc_info_GetAccessPointConfigurationResponse_wifi_2fwifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::wifi::_GetAccessPointConfigurationResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::wifi::GetAccessPointConfigurationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::wifi::GetAccessPointConfigurationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetAccessPointConfigurationResponse_wifi_2fwifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetAccessPointConfigurationResponse_wifi_2fwifi_2eproto}, {
      &scc_info_WifiResult_wifi_2fwifi_2eproto.base,
      &scc_info_AccessPointConfiguration_wifi_2fwifi_2eproto.base,}};

static void InitDefaultsscc_info_SetAccessPointConfigurationRequest_wifi_2fwifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::wifi::_SetAccessPointConfigurationRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::wifi::SetAccessPointConfigurationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::wifi::SetAccessPointConfigurationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetAccessPointConfigurationRequest_wifi_2fwifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetAccessPointConfigurationRequest_wifi_2fwifi_2eproto}, {
      &scc_info_AccessPointConfiguration_wifi_2fwifi_2eproto.base,}};

static void InitDefaultsscc_info_SetAccessPointConfigurationResponse_wifi_2fwifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::wifi::_SetAccessPointConfigurationResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::wifi::SetAccessPointConfigurationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::wifi::SetAccessPointConfigurationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetAccessPointConfigurationResponse_wifi_2fwifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetAccessPointConfigurationResponse_wifi_2fwifi_2eproto}, {
      &scc_info_WifiResult_wifi_2fwifi_2eproto.base,}};

static void InitDefaultsscc_info_WifiResult_wifi_2fwifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::wifi::_WifiResult_default_instance_;
    new (ptr) ::mavsdk::rpc::wifi::WifiResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::wifi::WifiResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WifiResult_wifi_2fwifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WifiResult_wifi_2fwifi_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_wifi_2fwifi_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_wifi_2fwifi_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_wifi_2fwifi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_wifi_2fwifi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::GetAccessPointConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::GetAccessPointConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::GetAccessPointConfigurationResponse, wifi_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::GetAccessPointConfigurationResponse, configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::SetAccessPointConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::SetAccessPointConfigurationRequest, configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::SetAccessPointConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::SetAccessPointConfigurationResponse, wifi_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::AccessPointConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::AccessPointConfiguration, ssid_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::AccessPointConfiguration, password_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::AccessPointConfiguration, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::WifiResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::WifiResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::wifi::WifiResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::wifi::GetAccessPointConfigurationRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::wifi::GetAccessPointConfigurationResponse)},
  { 12, -1, sizeof(::mavsdk::rpc::wifi::SetAccessPointConfigurationRequest)},
  { 18, -1, sizeof(::mavsdk::rpc::wifi::SetAccessPointConfigurationResponse)},
  { 24, -1, sizeof(::mavsdk::rpc::wifi::AccessPointConfiguration)},
  { 32, -1, sizeof(::mavsdk::rpc::wifi::WifiResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::wifi::_GetAccessPointConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::wifi::_GetAccessPointConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::wifi::_SetAccessPointConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::wifi::_SetAccessPointConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::wifi::_AccessPointConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::wifi::_WifiResult_default_instance_),
};

const char descriptor_table_protodef_wifi_2fwifi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017wifi/wifi.proto\022\017mavsdk.rpc.wifi\"$\n\"Ge"
  "tAccessPointConfigurationRequest\"\231\001\n#Get"
  "AccessPointConfigurationResponse\0220\n\013wifi"
  "_result\030\001 \001(\0132\033.mavsdk.rpc.wifi.WifiResu"
  "lt\022@\n\rconfiguration\030\002 \001(\0132).mavsdk.rpc.w"
  "ifi.AccessPointConfiguration\"f\n\"SetAcces"
  "sPointConfigurationRequest\022@\n\rconfigurat"
  "ion\030\001 \001(\0132).mavsdk.rpc.wifi.AccessPointC"
  "onfiguration\"W\n#SetAccessPointConfigurat"
  "ionResponse\0220\n\013wifi_result\030\001 \001(\0132\033.mavsd"
  "k.rpc.wifi.WifiResult\"_\n\030AccessPointConf"
  "iguration\022\014\n\004ssid\030\001 \001(\t\022\020\n\010password\030\002 \001("
  "\t\022#\n\004mode\030\003 \001(\0162\025.mavsdk.rpc.wifi.Mode\"\371"
  "\001\n\nWifiResult\0222\n\006result\030\001 \001(\0162\".mavsdk.r"
  "pc.wifi.WifiResult.Result\022\022\n\nresult_str\030"
  "\002 \001(\t\"\242\001\n\006Result\022\022\n\016RESULT_UNKNOWN\020\000\022\022\n\016"
  "RESULT_SUCCESS\020\001\022\023\n\017RESULT_REJECTED\020\002\022\025\n"
  "\021RESULT_MODE_ERROR\020\003\022\025\n\021RESULT_SSID_ERRO"
  "R\020\004\022\031\n\025RESULT_PASSWORD_ERROR\020\005\022\022\n\016RESULT"
  "_TIMEOUT\020\006*C\n\004Mode\022\022\n\016MODE_UNDEFINED\020\000\022\025"
  "\n\021MODE_ACCESS_POINT\020\001\022\020\n\014MODE_STATION\020\0022"
  "\247\002\n\013WifiService\022\212\001\n\033GetAccessPointConfig"
  "uration\0223.mavsdk.rpc.wifi.GetAccessPoint"
  "ConfigurationRequest\0324.mavsdk.rpc.wifi.G"
  "etAccessPointConfigurationResponse\"\000\022\212\001\n"
  "\033SetAccessPointConfiguration\0223.mavsdk.rp"
  "c.wifi.SetAccessPointConfigurationReques"
  "t\0324.mavsdk.rpc.wifi.SetAccessPointConfig"
  "urationResponse\"\000B\033\n\016io.mavsdk.wifiB\tWif"
  "iProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_wifi_2fwifi_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_wifi_2fwifi_2eproto_sccs[6] = {
  &scc_info_AccessPointConfiguration_wifi_2fwifi_2eproto.base,
  &scc_info_GetAccessPointConfigurationRequest_wifi_2fwifi_2eproto.base,
  &scc_info_GetAccessPointConfigurationResponse_wifi_2fwifi_2eproto.base,
  &scc_info_SetAccessPointConfigurationRequest_wifi_2fwifi_2eproto.base,
  &scc_info_SetAccessPointConfigurationResponse_wifi_2fwifi_2eproto.base,
  &scc_info_WifiResult_wifi_2fwifi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_wifi_2fwifi_2eproto_once;
static bool descriptor_table_wifi_2fwifi_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wifi_2fwifi_2eproto = {
  &descriptor_table_wifi_2fwifi_2eproto_initialized, descriptor_table_protodef_wifi_2fwifi_2eproto, "wifi/wifi.proto", 1174,
  &descriptor_table_wifi_2fwifi_2eproto_once, descriptor_table_wifi_2fwifi_2eproto_sccs, descriptor_table_wifi_2fwifi_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_wifi_2fwifi_2eproto::offsets,
  file_level_metadata_wifi_2fwifi_2eproto, 6, file_level_enum_descriptors_wifi_2fwifi_2eproto, file_level_service_descriptors_wifi_2fwifi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_wifi_2fwifi_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_wifi_2fwifi_2eproto), true);
namespace mavsdk {
namespace rpc {
namespace wifi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WifiResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_wifi_2fwifi_2eproto);
  return file_level_enum_descriptors_wifi_2fwifi_2eproto[0];
}
bool WifiResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WifiResult_Result WifiResult::RESULT_UNKNOWN;
constexpr WifiResult_Result WifiResult::RESULT_SUCCESS;
constexpr WifiResult_Result WifiResult::RESULT_REJECTED;
constexpr WifiResult_Result WifiResult::RESULT_MODE_ERROR;
constexpr WifiResult_Result WifiResult::RESULT_SSID_ERROR;
constexpr WifiResult_Result WifiResult::RESULT_PASSWORD_ERROR;
constexpr WifiResult_Result WifiResult::RESULT_TIMEOUT;
constexpr WifiResult_Result WifiResult::Result_MIN;
constexpr WifiResult_Result WifiResult::Result_MAX;
constexpr int WifiResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_wifi_2fwifi_2eproto);
  return file_level_enum_descriptors_wifi_2fwifi_2eproto[1];
}
bool Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetAccessPointConfigurationRequest::InitAsDefaultInstance() {
}
class GetAccessPointConfigurationRequest::_Internal {
 public:
};

GetAccessPointConfigurationRequest::GetAccessPointConfigurationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
}
GetAccessPointConfigurationRequest::GetAccessPointConfigurationRequest(const GetAccessPointConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
}

void GetAccessPointConfigurationRequest::SharedCtor() {
}

GetAccessPointConfigurationRequest::~GetAccessPointConfigurationRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
  SharedDtor();
}

void GetAccessPointConfigurationRequest::SharedDtor() {
}

void GetAccessPointConfigurationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccessPointConfigurationRequest& GetAccessPointConfigurationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccessPointConfigurationRequest_wifi_2fwifi_2eproto.base);
  return *internal_default_instance();
}


void GetAccessPointConfigurationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetAccessPointConfigurationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccessPointConfigurationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
  return target;
}

size_t GetAccessPointConfigurationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccessPointConfigurationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccessPointConfigurationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccessPointConfigurationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
    MergeFrom(*source);
  }
}

void GetAccessPointConfigurationRequest::MergeFrom(const GetAccessPointConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAccessPointConfigurationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccessPointConfigurationRequest::CopyFrom(const GetAccessPointConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.wifi.GetAccessPointConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccessPointConfigurationRequest::IsInitialized() const {
  return true;
}

void GetAccessPointConfigurationRequest::InternalSwap(GetAccessPointConfigurationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccessPointConfigurationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccessPointConfigurationResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::wifi::_GetAccessPointConfigurationResponse_default_instance_._instance.get_mutable()->wifi_result_ = const_cast< ::mavsdk::rpc::wifi::WifiResult*>(
      ::mavsdk::rpc::wifi::WifiResult::internal_default_instance());
  ::mavsdk::rpc::wifi::_GetAccessPointConfigurationResponse_default_instance_._instance.get_mutable()->configuration_ = const_cast< ::mavsdk::rpc::wifi::AccessPointConfiguration*>(
      ::mavsdk::rpc::wifi::AccessPointConfiguration::internal_default_instance());
}
class GetAccessPointConfigurationResponse::_Internal {
 public:
  static const ::mavsdk::rpc::wifi::WifiResult& wifi_result(const GetAccessPointConfigurationResponse* msg);
  static const ::mavsdk::rpc::wifi::AccessPointConfiguration& configuration(const GetAccessPointConfigurationResponse* msg);
};

const ::mavsdk::rpc::wifi::WifiResult&
GetAccessPointConfigurationResponse::_Internal::wifi_result(const GetAccessPointConfigurationResponse* msg) {
  return *msg->wifi_result_;
}
const ::mavsdk::rpc::wifi::AccessPointConfiguration&
GetAccessPointConfigurationResponse::_Internal::configuration(const GetAccessPointConfigurationResponse* msg) {
  return *msg->configuration_;
}
GetAccessPointConfigurationResponse::GetAccessPointConfigurationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
}
GetAccessPointConfigurationResponse::GetAccessPointConfigurationResponse(const GetAccessPointConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_wifi_result()) {
    wifi_result_ = new ::mavsdk::rpc::wifi::WifiResult(*from.wifi_result_);
  } else {
    wifi_result_ = nullptr;
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::mavsdk::rpc::wifi::AccessPointConfiguration(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
}

void GetAccessPointConfigurationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccessPointConfigurationResponse_wifi_2fwifi_2eproto.base);
  ::memset(&wifi_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&configuration_) -
      reinterpret_cast<char*>(&wifi_result_)) + sizeof(configuration_));
}

GetAccessPointConfigurationResponse::~GetAccessPointConfigurationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
  SharedDtor();
}

void GetAccessPointConfigurationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete wifi_result_;
  if (this != internal_default_instance()) delete configuration_;
}

void GetAccessPointConfigurationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccessPointConfigurationResponse& GetAccessPointConfigurationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccessPointConfigurationResponse_wifi_2fwifi_2eproto.base);
  return *internal_default_instance();
}


void GetAccessPointConfigurationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && wifi_result_ != nullptr) {
    delete wifi_result_;
  }
  wifi_result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAccessPointConfigurationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.wifi.WifiResult wifi_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_wifi_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.wifi.AccessPointConfiguration configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccessPointConfigurationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.wifi.WifiResult wifi_result = 1;
  if (this->has_wifi_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::wifi_result(this), target, stream);
  }

  // .mavsdk.rpc.wifi.AccessPointConfiguration configuration = 2;
  if (this->has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::configuration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
  return target;
}

size_t GetAccessPointConfigurationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.wifi.WifiResult wifi_result = 1;
  if (this->has_wifi_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wifi_result_);
  }

  // .mavsdk.rpc.wifi.AccessPointConfiguration configuration = 2;
  if (this->has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccessPointConfigurationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccessPointConfigurationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccessPointConfigurationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
    MergeFrom(*source);
  }
}

void GetAccessPointConfigurationResponse::MergeFrom(const GetAccessPointConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wifi_result()) {
    _internal_mutable_wifi_result()->::mavsdk::rpc::wifi::WifiResult::MergeFrom(from._internal_wifi_result());
  }
  if (from.has_configuration()) {
    _internal_mutable_configuration()->::mavsdk::rpc::wifi::AccessPointConfiguration::MergeFrom(from._internal_configuration());
  }
}

void GetAccessPointConfigurationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccessPointConfigurationResponse::CopyFrom(const GetAccessPointConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.wifi.GetAccessPointConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccessPointConfigurationResponse::IsInitialized() const {
  return true;
}

void GetAccessPointConfigurationResponse::InternalSwap(GetAccessPointConfigurationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(wifi_result_, other->wifi_result_);
  swap(configuration_, other->configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccessPointConfigurationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAccessPointConfigurationRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::wifi::_SetAccessPointConfigurationRequest_default_instance_._instance.get_mutable()->configuration_ = const_cast< ::mavsdk::rpc::wifi::AccessPointConfiguration*>(
      ::mavsdk::rpc::wifi::AccessPointConfiguration::internal_default_instance());
}
class SetAccessPointConfigurationRequest::_Internal {
 public:
  static const ::mavsdk::rpc::wifi::AccessPointConfiguration& configuration(const SetAccessPointConfigurationRequest* msg);
};

const ::mavsdk::rpc::wifi::AccessPointConfiguration&
SetAccessPointConfigurationRequest::_Internal::configuration(const SetAccessPointConfigurationRequest* msg) {
  return *msg->configuration_;
}
SetAccessPointConfigurationRequest::SetAccessPointConfigurationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
}
SetAccessPointConfigurationRequest::SetAccessPointConfigurationRequest(const SetAccessPointConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_configuration()) {
    configuration_ = new ::mavsdk::rpc::wifi::AccessPointConfiguration(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
}

void SetAccessPointConfigurationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAccessPointConfigurationRequest_wifi_2fwifi_2eproto.base);
  configuration_ = nullptr;
}

SetAccessPointConfigurationRequest::~SetAccessPointConfigurationRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
  SharedDtor();
}

void SetAccessPointConfigurationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete configuration_;
}

void SetAccessPointConfigurationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAccessPointConfigurationRequest& SetAccessPointConfigurationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAccessPointConfigurationRequest_wifi_2fwifi_2eproto.base);
  return *internal_default_instance();
}


void SetAccessPointConfigurationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetAccessPointConfigurationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.wifi.AccessPointConfiguration configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAccessPointConfigurationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.wifi.AccessPointConfiguration configuration = 1;
  if (this->has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::configuration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
  return target;
}

size_t SetAccessPointConfigurationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.wifi.AccessPointConfiguration configuration = 1;
  if (this->has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAccessPointConfigurationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAccessPointConfigurationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAccessPointConfigurationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
    MergeFrom(*source);
  }
}

void SetAccessPointConfigurationRequest::MergeFrom(const SetAccessPointConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_configuration()) {
    _internal_mutable_configuration()->::mavsdk::rpc::wifi::AccessPointConfiguration::MergeFrom(from._internal_configuration());
  }
}

void SetAccessPointConfigurationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAccessPointConfigurationRequest::CopyFrom(const SetAccessPointConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.wifi.SetAccessPointConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAccessPointConfigurationRequest::IsInitialized() const {
  return true;
}

void SetAccessPointConfigurationRequest::InternalSwap(SetAccessPointConfigurationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(configuration_, other->configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAccessPointConfigurationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAccessPointConfigurationResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::wifi::_SetAccessPointConfigurationResponse_default_instance_._instance.get_mutable()->wifi_result_ = const_cast< ::mavsdk::rpc::wifi::WifiResult*>(
      ::mavsdk::rpc::wifi::WifiResult::internal_default_instance());
}
class SetAccessPointConfigurationResponse::_Internal {
 public:
  static const ::mavsdk::rpc::wifi::WifiResult& wifi_result(const SetAccessPointConfigurationResponse* msg);
};

const ::mavsdk::rpc::wifi::WifiResult&
SetAccessPointConfigurationResponse::_Internal::wifi_result(const SetAccessPointConfigurationResponse* msg) {
  return *msg->wifi_result_;
}
SetAccessPointConfigurationResponse::SetAccessPointConfigurationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
}
SetAccessPointConfigurationResponse::SetAccessPointConfigurationResponse(const SetAccessPointConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_wifi_result()) {
    wifi_result_ = new ::mavsdk::rpc::wifi::WifiResult(*from.wifi_result_);
  } else {
    wifi_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
}

void SetAccessPointConfigurationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAccessPointConfigurationResponse_wifi_2fwifi_2eproto.base);
  wifi_result_ = nullptr;
}

SetAccessPointConfigurationResponse::~SetAccessPointConfigurationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
  SharedDtor();
}

void SetAccessPointConfigurationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete wifi_result_;
}

void SetAccessPointConfigurationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAccessPointConfigurationResponse& SetAccessPointConfigurationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAccessPointConfigurationResponse_wifi_2fwifi_2eproto.base);
  return *internal_default_instance();
}


void SetAccessPointConfigurationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && wifi_result_ != nullptr) {
    delete wifi_result_;
  }
  wifi_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetAccessPointConfigurationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.wifi.WifiResult wifi_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_wifi_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAccessPointConfigurationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.wifi.WifiResult wifi_result = 1;
  if (this->has_wifi_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::wifi_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
  return target;
}

size_t SetAccessPointConfigurationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.wifi.WifiResult wifi_result = 1;
  if (this->has_wifi_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wifi_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAccessPointConfigurationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAccessPointConfigurationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAccessPointConfigurationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
    MergeFrom(*source);
  }
}

void SetAccessPointConfigurationResponse::MergeFrom(const SetAccessPointConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wifi_result()) {
    _internal_mutable_wifi_result()->::mavsdk::rpc::wifi::WifiResult::MergeFrom(from._internal_wifi_result());
  }
}

void SetAccessPointConfigurationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAccessPointConfigurationResponse::CopyFrom(const SetAccessPointConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.wifi.SetAccessPointConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAccessPointConfigurationResponse::IsInitialized() const {
  return true;
}

void SetAccessPointConfigurationResponse::InternalSwap(SetAccessPointConfigurationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(wifi_result_, other->wifi_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAccessPointConfigurationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccessPointConfiguration::InitAsDefaultInstance() {
}
class AccessPointConfiguration::_Internal {
 public:
};

AccessPointConfiguration::AccessPointConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.wifi.AccessPointConfiguration)
}
AccessPointConfiguration::AccessPointConfiguration(const AccessPointConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssid_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.wifi.AccessPointConfiguration)
}

void AccessPointConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccessPointConfiguration_wifi_2fwifi_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

AccessPointConfiguration::~AccessPointConfiguration() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.wifi.AccessPointConfiguration)
  SharedDtor();
}

void AccessPointConfiguration::SharedDtor() {
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccessPointConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccessPointConfiguration& AccessPointConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccessPointConfiguration_wifi_2fwifi_2eproto.base);
  return *internal_default_instance();
}


void AccessPointConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.wifi.AccessPointConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  _internal_metadata_.Clear();
}

const char* AccessPointConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.wifi.AccessPointConfiguration.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.wifi.AccessPointConfiguration.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.wifi.Mode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::mavsdk::rpc::wifi::Mode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccessPointConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.wifi.AccessPointConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.wifi.AccessPointConfiguration.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.wifi.AccessPointConfiguration.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // .mavsdk.rpc.wifi.Mode mode = 3;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.wifi.AccessPointConfiguration)
  return target;
}

size_t AccessPointConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.wifi.AccessPointConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .mavsdk.rpc.wifi.Mode mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessPointConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.wifi.AccessPointConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessPointConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccessPointConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.wifi.AccessPointConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.wifi.AccessPointConfiguration)
    MergeFrom(*source);
  }
}

void AccessPointConfiguration::MergeFrom(const AccessPointConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.wifi.AccessPointConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {

    ssid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssid_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void AccessPointConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.wifi.AccessPointConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessPointConfiguration::CopyFrom(const AccessPointConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.wifi.AccessPointConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessPointConfiguration::IsInitialized() const {
  return true;
}

void AccessPointConfiguration::InternalSwap(AccessPointConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessPointConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WifiResult::InitAsDefaultInstance() {
}
class WifiResult::_Internal {
 public:
};

WifiResult::WifiResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.wifi.WifiResult)
}
WifiResult::WifiResult(const WifiResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.wifi.WifiResult)
}

void WifiResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WifiResult_wifi_2fwifi_2eproto.base);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

WifiResult::~WifiResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.wifi.WifiResult)
  SharedDtor();
}

void WifiResult::SharedDtor() {
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WifiResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WifiResult& WifiResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WifiResult_wifi_2fwifi_2eproto.base);
  return *internal_default_instance();
}


void WifiResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.wifi.WifiResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* WifiResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.wifi.WifiResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::wifi::WifiResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.wifi.WifiResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WifiResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.wifi.WifiResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.wifi.WifiResult.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.wifi.WifiResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.wifi.WifiResult)
  return target;
}

size_t WifiResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.wifi.WifiResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.wifi.WifiResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.wifi.WifiResult)
  GOOGLE_DCHECK_NE(&from, this);
  const WifiResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WifiResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.wifi.WifiResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.wifi.WifiResult)
    MergeFrom(*source);
  }
}

void WifiResult::MergeFrom(const WifiResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.wifi.WifiResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {

    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void WifiResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.wifi.WifiResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiResult::CopyFrom(const WifiResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.wifi.WifiResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiResult::IsInitialized() const {
  return true;
}

void WifiResult::InternalSwap(WifiResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WifiResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace wifi
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::wifi::GetAccessPointConfigurationRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::wifi::GetAccessPointConfigurationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::wifi::GetAccessPointConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::wifi::GetAccessPointConfigurationResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::wifi::GetAccessPointConfigurationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::wifi::GetAccessPointConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::wifi::SetAccessPointConfigurationRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::wifi::SetAccessPointConfigurationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::wifi::SetAccessPointConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::wifi::SetAccessPointConfigurationResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::wifi::SetAccessPointConfigurationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::wifi::SetAccessPointConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::wifi::AccessPointConfiguration* Arena::CreateMaybeMessage< ::mavsdk::rpc::wifi::AccessPointConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::wifi::AccessPointConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::wifi::WifiResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::wifi::WifiResult >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::wifi::WifiResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
